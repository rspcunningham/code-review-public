name: 'Code Review Action'
description: 'Runs code review'
author: 'me'

inputs:
  api-key:
    description: 'API key for the Codex service (e.g., OpenAI API key). This will be used as OPENAI_API_KEY in the container.'
    required: true
  pat-key:
    description: 'GitHub PAT. This will be used as INPUT_PAT_KEY in the container.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Pull Docker Image
      shell: bash
      run: docker pull ghcr.io/rspcunningham/code-review-test:latest
      # This command will use the Docker login session established by
      # docker/login-action in the calling workflow.

    - name: Run Code Review Container
      shell: bash
      run: |
        docker run --rm \
          --platform linux/amd64 \
          -e API_KEY=${{ inputs.api-key }} \
          -v "${{ github.workspace }}":/github/workspace \
          -w /github/workspace \
          ghcr.io/rspcunningham/code-review-test:latest

    - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reviewFilePath = 'CODE_REVIEW.md';

            if (!fs.existsSync(reviewFilePath)) {
              core.setFailed(`Error: ${reviewFilePath} not found. Codex review may have failed to produce an output.`);
            } else {
              const body = fs.readFileSync(reviewFilePath, 'utf8');

              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body,
                event: 'COMMENT' // or 'APPROVE' or 'REQUEST_CHANGES'
              });
            }

      - name: Post inline review comments
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentFilePath = 'CODE_REVIEW.json';

            const reviewItems = JSON.parse(fs.readFileSync(commentFilePath, 'utf8'));
            const pr = context.payload.pull_request;
            const sha = pr.head.sha;
            for (const item of reviewItems) {
              try {
                const commentPayload = {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  commit_id: sha,
                  path: item.path,
                  body: item.body,
                  line: item.line,
                  side: item.side || 'RIGHT'
                };

                if (item.start_line) {
                  commentPayload.start_line = item.start_line;
                  commentPayload.start_side = item.start_side || item.side || 'RIGHT'; // Default start_side if not given
                }

                await github.rest.pulls.createReviewComment(commentPayload);
              } catch (error) {
                core.warning(`Could not post inline comment at ${item.path}:${item.line} â€” ${error.message}`);
              }
            }



branding:
  icon: 'code'
  color: 'blue' 
